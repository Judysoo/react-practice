{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-practice\\\\todo-app-fast\\\\src\\\\App.js\";\nimport React, { useState, useRef, useCallback } from 'react'; //상태 관리 useState\n\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos() {\n  const array = [];\n\n  for (let i = 1; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: '할 일${i}',\n      checked: false\n    });\n  }\n\n  return array;\n}\n\nconst App = () => {\n  const [todos, setTodos] = useState([//useState 함수의 파라미터에 함수의 기본값을 넣어 주었다.\n    ///[상태값, 상태를 설정하는 함수]\n  ]); //todos 배열 안에 들어있는 객체에 고유 id, 내용 text, 완료 여부 checked 값이 있다.\n  //이 배열은 TodoList.js에 props로 전달될 것이다.\n\n  const nextId = useRef(2501); //고윳값으로 사용될 ID\n  //Ref를 사용하여 변수 담기\n\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n    setTodos(todos.concat(todo));\n    nextId.current += 1; //nextId 1씩 더하기\n  }, [todos]);\n  const onRemove = useCallback(id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }, //todos 배열에서 id로 항목 지우기  ↑filter 조건(T or F)\n  [todos]);\n  const onToggle = useCallback(id => {\n    setTodos(todos.map(todo => todo.id === id ? { ...todo,\n      checked: !todo.checked\n    } : todo));\n  }, [todos]);\n  return /*#__PURE__*/React.createElement(TodoTemplate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TodoInsert, {\n    onInsert: onInsert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/react-practice/todo-app-fast/src/App.js"],"names":["React","useState","useRef","useCallback","TodoTemplate","TodoInsert","TodoList","createBulkTodos","array","i","push","id","text","checked","App","todos","setTodos","nextId","onInsert","todo","current","concat","onRemove","filter","onToggle","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD,C,CAA8D;;AAC9D,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,SAASC,eAAT,GAA2B;AACzB,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,IAArB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9BD,IAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,MAAAA,EAAE,EAAEF,CADK;AAETG,MAAAA,IAAI,EAAE,SAFG;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAAX;AAKD;;AACD,SAAOL,KAAP;AACD;;AAED,MAAMM,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CACjC;AACA;AAFiC,GAAD,CAAlC,CADgB,CAIZ;AACJ;;AACA,QAAMgB,MAAM,GAAGf,MAAM,CAAC,IAAD,CAArB,CANgB,CAOhB;AACA;;AACA,QAAMgB,QAAQ,GAAGf,WAAW,CACzBS,IAAD,IAAU;AACR,UAAMO,IAAI,GAAG;AACXR,MAAAA,EAAE,EAAEM,MAAM,CAACG,OADA;AAEXR,MAAAA,IAFW;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKAG,IAAAA,QAAQ,CAACD,KAAK,CAACM,MAAN,CAAaF,IAAb,CAAD,CAAR;AACAF,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB,CAPQ,CAOa;AACtB,GATyB,EAU1B,CAACL,KAAD,CAV0B,CAA5B;AAaA,QAAMO,QAAQ,GAAGnB,WAAW,CACzBQ,EAAD,IAAQ;AACNK,IAAAA,QAAQ,CAACD,KAAK,CAACQ,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACR,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAHyB,EAGvB;AACH,GAACI,KAAD,CAJ0B,CAA5B;AAOA,QAAMS,QAAQ,GAAGrB,WAAW,CACzBQ,EAAD,IAAQ;AACNK,IAAAA,QAAQ,CACND,KAAK,CAACU,GAAN,CAAWN,IAAD,IACRA,IAAI,CAACR,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGQ,IAAL;AAAWN,MAAAA,OAAO,EAAE,CAACM,IAAI,CAACN;AAA1B,KAAjB,GAAuDM,IADzD,CADM,CAAR;AAKD,GAPyB,EAQ1B,CAACJ,KAAD,CAR0B,CAA5B;AAWA,sBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAwB,IAAA,QAAQ,EAAEO,QAAlC;AAA4C,IAAA,QAAQ,EAAEE,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA9CD;;AAgDA,eAAeV,GAAf","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'; //상태 관리 useState\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction createBulkTodos() {\r\n  const array = [];\r\n  for (let i = 1; i <= 2500; i++) {\r\n    array.push({\r\n      id: i,\r\n      text: '할 일${i}',\r\n      checked: false,\r\n    });\r\n  }\r\n  return array;\r\n}\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState([\r\n    //useState 함수의 파라미터에 함수의 기본값을 넣어 주었다.\r\n    ///[상태값, 상태를 설정하는 함수]\r\n  ]); //todos 배열 안에 들어있는 객체에 고유 id, 내용 text, 완료 여부 checked 값이 있다.\r\n  //이 배열은 TodoList.js에 props로 전달될 것이다.\r\n  const nextId = useRef(2501);\r\n  //고윳값으로 사용될 ID\r\n  //Ref를 사용하여 변수 담기\r\n  const onInsert = useCallback(\r\n    (text) => {\r\n      const todo = {\r\n        id: nextId.current,\r\n        text,\r\n        checked: false,\r\n      };\r\n      setTodos(todos.concat(todo));\r\n      nextId.current += 1; //nextId 1씩 더하기\r\n    },\r\n    [todos],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (id) => {\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    }, //todos 배열에서 id로 항목 지우기  ↑filter 조건(T or F)\r\n    [todos],\r\n  );\r\n\r\n  const onToggle = useCallback(\r\n    (id) => {\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id ? { ...todo, checked: !todo.checked } : todo,\r\n        ),\r\n      );\r\n    },\r\n    [todos],\r\n  );\r\n\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
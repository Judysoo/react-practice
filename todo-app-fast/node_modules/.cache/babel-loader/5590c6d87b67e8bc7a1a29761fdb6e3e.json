{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-practice\\\\todo-app\\\\src\\\\App.js\";\nimport React, { useState, useRef, useCallback } from 'react'; //상태 관리 useState\n\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [todos, setTodos] = useState([//useState 함수의 파라미터에 함수의 기본값을 넣어 주었다.\n  ///[상태값, 상태를 설정하는 함수]\n  {\n    id: 1,\n    text: '애들 발톱깎기',\n    checked: false\n  }, {\n    id: 2,\n    text: '리액트로 일정 어플리케이션 제작하기',\n    checked: true\n  }, {\n    id: 3,\n    text: '설빙 먹기',\n    checked: false\n  }]); //todos 배열 안에 들어있는 객체에 고유 id, 내용 text, 완료 여부 checked 값이 있다.\n  //이 배열은 TodoList.js에 props로 전달될 것이다.\n\n  const nextId = useRef(4); //고윳값으로 사용될 ID\n  //Ref를 사용하여 변수 담기\n\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n    setTodos(todos.concat(todo));\n    nextId.current += 1; //nextId 1씩 더하기\n  }, [todos]);\n  const onRemove = useCallback(id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }, //todos 배열에서 id로 항목 지우기\n  [todos]);\n  return /*#__PURE__*/React.createElement(TodoTemplate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TodoInsert, {\n    onInsert: onInsert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    onRemove: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/react-practice/todo-app/src/App.js"],"names":["React","useState","useRef","useCallback","TodoTemplate","TodoInsert","TodoList","App","todos","setTodos","id","text","checked","nextId","onInsert","todo","current","concat","onRemove","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD,C,CAA8D;;AAC9D,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CACjC;AACA;AACA;AAAES,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,OAAO,EAAE;AAAnC,GAHiC,EAIjC;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,qBAAf;AAAsCC,IAAAA,OAAO,EAAE;AAA/C,GAJiC,EAKjC;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,OAAf;AAAwBC,IAAAA,OAAO,EAAE;AAAjC,GALiC,CAAD,CAAlC,CADgB,CAOZ;AACJ;;AACA,QAAMC,MAAM,GAAGX,MAAM,CAAC,CAAD,CAArB,CATgB,CAUhB;AACA;;AACA,QAAMY,QAAQ,GAAGX,WAAW,CACzBQ,IAAD,IAAU;AACR,UAAMI,IAAI,GAAG;AACXL,MAAAA,EAAE,EAAEG,MAAM,CAACG,OADA;AAEXL,MAAAA,IAFW;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKAH,IAAAA,QAAQ,CAACD,KAAK,CAACS,MAAN,CAAaF,IAAb,CAAD,CAAR;AACAF,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB,CAPQ,CAOa;AACtB,GATyB,EAU1B,CAACR,KAAD,CAV0B,CAA5B;AAaA,QAAMU,QAAQ,GAAGf,WAAW,CACzBO,EAAD,IAAQ;AACND,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAHyB,EAGvB;AACH,GAACF,KAAD,CAJ0B,CAA5B;AAMA,sBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEM,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,KAAjB;AAAwB,IAAA,QAAQ,EAAEU,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CArCD;;AAuCA,eAAeX,GAAf","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'; //상태 관리 useState\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState([\r\n    //useState 함수의 파라미터에 함수의 기본값을 넣어 주었다.\r\n    ///[상태값, 상태를 설정하는 함수]\r\n    { id: 1, text: '애들 발톱깎기', checked: false },\r\n    { id: 2, text: '리액트로 일정 어플리케이션 제작하기', checked: true },\r\n    { id: 3, text: '설빙 먹기', checked: false },\r\n  ]); //todos 배열 안에 들어있는 객체에 고유 id, 내용 text, 완료 여부 checked 값이 있다.\r\n  //이 배열은 TodoList.js에 props로 전달될 것이다.\r\n  const nextId = useRef(4);\r\n  //고윳값으로 사용될 ID\r\n  //Ref를 사용하여 변수 담기\r\n  const onInsert = useCallback(\r\n    (text) => {\r\n      const todo = {\r\n        id: nextId.current,\r\n        text,\r\n        checked: false,\r\n      };\r\n      setTodos(todos.concat(todo));\r\n      nextId.current += 1; //nextId 1씩 더하기\r\n    },\r\n    [todos],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (id) => {\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    }, //todos 배열에서 id로 항목 지우기\r\n    [todos],\r\n  );\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onRemove={onRemove} />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}